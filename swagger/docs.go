// Package swagger Code generated by swaggo/swag. DO NOT EDIT
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Retrieves all metrics with their names, types, and values",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Returns a list of metrics",
                "responses": {
                    "200": {
                        "description": "List of metrics",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "description": "Checks the availability of the database by pinging it",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Database"
                ],
                "summary": "Pings the database",
                "responses": {
                    "200": {
                        "description": "Pong"
                    },
                    "500": {
                        "description": "Failed to ping database",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/update": {
            "post": {
                "description": "Updates the value of a metric based on the provided JSON payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Updates a metric using JSON",
                "responses": {
                    "200": {
                        "description": "Updated metric details",
                        "schema": {
                            "$ref": "#/definitions/serialization.Metric"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON body or invalid metric value",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Metric not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/update/{metricType}/{metricName}/{metricValue}": {
            "post": {
                "description": "Updates the value of an existing metric or create a new metric by its name and type",
                "tags": [
                    "Metrics"
                ],
                "summary": "Updates a metric",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Type of the metric (e.g., gauge, counter)",
                        "name": "metricType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the metric to be updated.",
                        "name": "metricName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New value for the metric.",
                        "name": "metricValue",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metric updated successfully"
                    },
                    "400": {
                        "description": "Invalid input or update failure",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/updates": {
            "post": {
                "description": "Updates the values of multiple metrics based on the provided JSON payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Updates multiple metrics using JSON",
                "responses": {
                    "200": {
                        "description": "Successfully updated metrics"
                    },
                    "400": {
                        "description": "Invalid JSON body or invalid metrics",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/value/": {
            "post": {
                "description": "Retrieves a metric by its name and type and returns it in JSON format",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Returns a metric as JSON",
                "responses": {
                    "200": {
                        "description": "Getting metric details",
                        "schema": {
                            "$ref": "#/definitions/serialization.Metric"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Metric not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/value/{metricType}/{metricName}": {
            "get": {
                "description": "Retrieves the value of a metric by its name and type",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Returns the value of a specific metric",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Type of the metric (e.g., gauge, counter)",
                        "name": "metricType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the metric to be getting.",
                        "name": "metricName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metric Value",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Metric Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "serialization.Metric": {
            "type": "object",
            "properties": {
                "delta": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "MetricCollector API",
	Description:      "Metric collector service.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
